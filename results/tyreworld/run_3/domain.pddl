(define (domain tyreworld)
    (:requirements :disjunctive-preconditions :equality :existential-preconditions :strips :typing)
    (:types LOCATION NUT ROBOT TOOL WHEEL car_side jack nut1 nut2 nut3 nut4 robot1 wheel_back_left wheel_back_right wheel_front_left wheel_front_right workshop wrench)
    (:predicates 
    (at ?robot - ROBOT ?location - LOCATION)  
    (empty ?robot - ROBOT)  
    (holding ?robot - ROBOT ?tool - TOOL)  
    (in ?tool - TOOL ?location - LOCATION)  
    (isJack ?tool - TOOL)  
    (isWrench ?tool - TOOL)  
    (lowered ?location - LOCATION)  
    (on ?spareWheel - WHEEL ?location - LOCATION)  
    (raised ?location - LOCATION)  
    (tightened ?nut - NUT ?wheel - WHEEL))
    (:action fetch
        :parameters (?robot - ROBOT ?location - LOCATION ?tool - TOOL)
        :precondition (and (at ?robot ?location) (in ?tool ?location) (empty ?robot))
        :effect (and (holding ?robot ?tool) (not (in ?tool ?location)) (not (empty ?robot)))
    )
     (:action jackUpCar
        :parameters (?robot - ROBOT ?location - LOCATION ?tool - TOOL)
        :precondition (and (at ?robot ?location) (holding ?robot ?tool) (isJack ?tool) (lowered ?location))
        :effect (and (raised ?location) (not (lowered ?location)))
    )
     (:action lowerCar
        :parameters (?robot - ROBOT ?location - LOCATION ?tool - TOOL)
        :precondition (and (at ?robot ?location) (holding ?robot ?tool) (isJack ?tool) (raised ?location))
        :effect (and (lowered ?location) (not (raised ?location)))
    )
     (:action removeWheel
        :parameters (?robot - ROBOT ?location - LOCATION ?targetWheel - WHEEL)
        :precondition (and (at ?robot ?location) (raised ?location) (on ?targetWheel ?location))
        :effect (not (on ?targetWheel ?location))
    )
     (:action replaceWheel
        :parameters (?robot - ROBOT ?location - LOCATION ?spareWheel - WHEEL)
        :precondition (and (at ?robot ?location) (raised ?location))
        :effect (on ?spareWheel ?location)
    )
     (:action returnTools
        :parameters (?robot - ROBOT ?tool - TOOL ?location - LOCATION)
        :precondition (holding ?robot ?tool)
        :effect (and (not (holding ?robot ?tool)) (in ?tool ?location) (empty ?robot))
    )
     (:action tightenNut
        :parameters (?robot - ROBOT ?tool - TOOL ?nut - NUT ?wheel - WHEEL)
        :precondition (and (holding ?robot ?tool) (isWrench ?tool) (not (tightened ?nut ?wheel)))
        :effect (tightened ?nut ?wheel)
    )
     (:action undoNut
        :parameters (?robot - ROBOT ?tool - TOOL ?nut - NUT ?wheel - WHEEL)
        :precondition (and (holding ?robot ?tool) (isWrench ?tool) (tightened ?nut ?wheel))
        :effect (not (tightened ?nut ?wheel))
    )
)