(define (domain tyreworld)
    (:requirements :disjunctive-preconditions :equality :existential-preconditions :strips :typing)
    (:types CONTAINER HUB LOCATION NUT TOOL WHEEL boot car_side flat_hub flat_nut flat_wheel jack pump spare_hub spare_nut spare_wheel target_wheel wrench)
    (:predicates 
    (atWheel ?location - LOCATION ?wheel - WHEEL)  
    (closed ?container - CONTAINER)  
    (connected ?wheel - WHEEL ?hub - HUB)  
    (free ?wheel - WHEEL)  
    (holdingTool ?tool - TOOL)  
    (holdingWheel ?wheel - WHEEL)  
    (inTool ?container - CONTAINER ?tool - TOOL)  
    (inflated ?wheel - WHEEL)  
    (jackedUp ?hub - HUB)  
    (loose ?nut - NUT)  
    (lowered ?hub - HUB)  
    (opened ?container - CONTAINER))
    (:action close
        :parameters (?container - CONTAINER)
        :precondition (opened ?container)
        :effect (and (closed ?container) (not (opened ?container)))
    )
     (:action doUp
        :parameters (?wheel - WHEEL ?hub - HUB ?location - LOCATION)
        :precondition (and (holdingWheel ?wheel) (jackedUp ?hub))
        :effect (and (connected ?wheel ?hub) (atWheel ?location ?wheel))
    )
     (:action fetchTool
        :parameters (?container - CONTAINER ?tool - TOOL)
        :precondition (and (inTool ?container ?tool) (opened ?container))
        :effect (and (holdingTool ?tool) (not (inTool ?container ?tool)))
    )
     (:action jackUp
        :parameters (?tool - TOOL ?location - LOCATION ?wheel - WHEEL ?hub - HUB)
        :precondition (and (holdingTool ?tool) (atWheel ?location ?wheel))
        :effect (jackedUp ?hub)
    )
     (:action lowerCar
        :parameters (?hub - HUB)
        :precondition (jackedUp ?hub)
        :effect (and (lowered ?hub) (not (jackedUp ?hub)))
    )
     (:action open
        :parameters (?container - CONTAINER)
        :precondition (closed ?container)
        :effect (and (opened ?container) (not (closed ?container)))
    )
     (:action pump
        :parameters (?tool - TOOL ?location - LOCATION ?wheel - WHEEL)
        :precondition (and (holdingTool ?tool) (atWheel ?location ?wheel))
        :effect (inflated ?wheel)
    )
     (:action putBack
        :parameters (?tool - TOOL ?container - CONTAINER)
        :precondition (and (holdingTool ?tool) (opened ?container))
        :effect (and (inTool ?container ?tool) (not (holdingTool ?tool)))
    )
     (:action remove
        :parameters (?wheel - WHEEL ?hub - HUB)
        :precondition (and (free ?wheel) (jackedUp ?hub))
        :effect (and (not (connected ?wheel ?hub)) (holdingWheel ?wheel))
    )
     (:action undo
        :parameters (?tool - TOOL ?wheel - WHEEL ?hub - HUB ?nut - NUT)
        :precondition (and (holdingTool ?tool) (connected ?wheel ?hub))
        :effect (and (free ?wheel) (loose ?nut))
    )
)