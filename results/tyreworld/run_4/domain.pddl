(define (domain tyreworld)
    (:requirements :disjunctive-preconditions :equality :existential-preconditions :strips :typing)
    (:types CONTAINER HUB LOCATION NUT ROBOT TOOL WHEEL boot car_hub car_side flat_wheel jack nut1 pump robot spare_wheel target_wheel wrench)
    (:predicates 
    (hubAtLocation ?hub - HUB ?location - LOCATION)  
    (hubElevated ?hub - HUB)  
    (nutAssociatedWithHub ?nut - NUT ?hub - HUB)  
    (nutAtHub ?nut - NUT ?hub - HUB)  
    (nutLooseOnHub ?nut - NUT ?hub - HUB)  
    (robotAtLocation ?robot - ROBOT ?location - LOCATION)  
    (toolAtLocation ?tool - TOOL ?location - LOCATION)  
    (toolContainedInContainer ?tool - TOOL ?container - CONTAINER)  
    (toolIsType ?tool - TOOL)  
    (wheelAtHub ?wheel - WHEEL ?hub - HUB)  
    (wheelAtLocation ?wheel - WHEEL ?location - LOCATION))
    (:action doUp
        :parameters (?nut - NUT ?hub - HUB ?tool - TOOL ?location - LOCATION ?wheel - WHEEL)
        :precondition (and (nutAtHub ?nut ?hub) (toolAtLocation ?tool ?location) (toolIsType ?tool) (wheelAtHub ?wheel ?hub))
        :effect (and (nutAssociatedWithHub ?nut ?hub) (not (nutLooseOnHub ?nut ?hub)))
    )
     (:action fetch
        :parameters (?tool - TOOL ?container - CONTAINER ?robot - ROBOT ?location - LOCATION)
        :precondition (and (toolContainedInContainer ?tool ?container) (robotAtLocation ?robot ?location))
        :effect (and (toolAtLocation ?tool ?location) (not (toolContainedInContainer ?tool ?container)))
    )
     (:action jackDown
        :parameters (?jack - TOOL ?location - LOCATION ?nut - NUT ?hub - HUB)
        :precondition (and (toolAtLocation ?jack ?location) (nutAssociatedWithHub ?nut ?hub))
        :effect (and (hubAtLocation ?hub ?location) (not (hubElevated ?hub)))
    )
     (:action mount
        :parameters (?hub - HUB ?wheel - WHEEL ?location - LOCATION)
        :precondition (and (hubElevated ?hub) (wheelAtLocation ?wheel ?location))
        :effect (and (wheelAtHub ?wheel ?hub) (not (wheelAtLocation ?wheel ?location)))
    )
     (:action remove
        :parameters (?hub - HUB ?wheel - WHEEL ?nut - NUT ?location - LOCATION)
        :precondition (and (hubElevated ?hub) (wheelAtHub ?wheel ?hub) (nutLooseOnHub ?nut ?hub))
        :effect (and (wheelAtLocation ?wheel ?location) (not (wheelAtHub ?wheel ?hub)))
    )
     (:action undo
        :parameters (?nut - NUT ?hub - HUB ?tool - TOOL ?location - LOCATION)
        :precondition (and (nutAtHub ?nut ?hub) (toolAtLocation ?tool ?location) (toolIsType ?tool))
        :effect (and (nutLooseOnHub ?nut ?hub) (not (nutAssociatedWithHub ?nut ?hub)))
    )
)